"""add base models

Revision ID: 8ea8e0e68351
Revises: 700eb402673f
Create Date: 2025-09-16 14:29:36.632453

"""

from collections.abc import Sequence

import pgvector
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "8ea8e0e68351"
down_revision: str | Sequence[str] | None = "700eb402673f"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")
    op.create_table(
        "guilds",
        sa.Column("discord_guild_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_guilds")),
    )
    op.create_index(op.f("ix_guilds_id"), "guilds", ["id"], unique=False)
    op.create_table(
        "users",
        sa.Column("discord_user_id", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("discord_user_id", name=op.f("uq_users_discord_user_id")),
        sa.UniqueConstraint("email", name=op.f("uq_users_email")),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "agents",
        sa.Column("instruction", sa.Text(), nullable=True),
        sa.Column("discord_user_id", sa.String(), nullable=False),
        sa.Column("guild_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["guild_id"], ["guilds.id"], name=op.f("fk_agents_guild_id_guilds")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_agents")),
    )
    op.create_index(op.f("ix_agents_id"), "agents", ["id"], unique=False)
    op.create_table(
        "channels",
        sa.Column("discord_channel_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("guild_id", sa.UUID(), nullable=False),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"], ["agents.id"], name=op.f("fk_channels_agent_id_agents")
        ),
        sa.ForeignKeyConstraint(
            ["guild_id"], ["guilds.id"], name=op.f("fk_channels_guild_id_guilds")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_channels")),
        sa.UniqueConstraint("agent_id", name=op.f("uq_channels_agent_id")),
    )
    op.create_index(op.f("ix_channels_id"), "channels", ["id"], unique=False)
    op.create_table(
        "messages",
        sa.Column("discord_message_id", sa.String(), nullable=False),
        sa.Column("discord_user_id", sa.String(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column(
            "embedding_vector",
            pgvector.sqlalchemy.vector.VECTOR(dim=768),
            nullable=False,
        ),
        sa.Column("channel_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["channel_id"],
            ["channels.id"],
            name=op.f("fk_messages_channel_id_channels"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_messages_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_messages")),
    )
    op.create_index(
        "ix_messages_embedding_vector_cosine",
        "messages",
        ["embedding_vector"],
        unique=False,
        postgresql_using="ivfflat",
        postgresql_with={"lists": 100},
        postgresql_ops={"embedding_vector": "vector_cosine_ops"},
    )
    op.create_index(
        "ix_messages_embedding_vector_l2",
        "messages",
        ["embedding_vector"],
        unique=False,
        postgresql_using="ivfflat",
        postgresql_with={"lists": 100},
        postgresql_ops={"embedding_vector": "vector_l2_ops"},
    )
    op.create_index(op.f("ix_messages_id"), "messages", ["id"], unique=False)
    op.drop_index(op.f("ix_discord_agents_id"), table_name="discord_agents")
    op.drop_table("discord_agents")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "discord_agents",
        sa.Column("server_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("channel_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("discord_user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("instruction", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_discord_agents")),
    )
    op.create_index(
        op.f("ix_discord_agents_id"), "discord_agents", ["id"], unique=False
    )
    op.drop_index(op.f("ix_messages_id"), table_name="messages")
    op.drop_index(
        "ix_messages_embedding_vector_l2",
        table_name="messages",
        postgresql_using="ivfflat",
        postgresql_with={"lists": 100},
        postgresql_ops={"embedding_vector": "vector_l2_ops"},
    )
    op.drop_index(
        "ix_messages_embedding_vector_cosine",
        table_name="messages",
        postgresql_using="ivfflat",
        postgresql_with={"lists": 100},
        postgresql_ops={"embedding_vector": "vector_cosine_ops"},
    )
    op.drop_table("messages")
    op.drop_index(op.f("ix_channels_id"), table_name="channels")
    op.drop_table("channels")
    op.drop_index(op.f("ix_agents_id"), table_name="agents")
    op.drop_table("agents")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_guilds_id"), table_name="guilds")
    op.drop_table("guilds")
    # ### end Alembic commands ###
